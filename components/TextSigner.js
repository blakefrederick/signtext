"use client"

import { useState } from 'react'
import OutputDisplay from './OutputDisplay'
import { signText, encodePayload } from '../lib/sign'

export default function TextSigner({ ip }) {
  const [text, setText] = useState('')
  const [affirmed, setAffirmed] = useState(false)
  const [signed, setSigned] = useState('')
  const [success, setSuccess] = useState(false)
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState('')
  const [includeNameEmail, setIncludeNameEmail] = useState(false)
  const [name, setName] = useState('')
  const [email, setEmail] = useState('')

  const handleSubmit = async (e) => {
    e.preventDefault()
    setError('')
    if (!affirmed) {
      setError('You must certify authorship.')
      return
    }
    if (!text.trim()) {
      setError('Text cannot be empty.')
      return
    }
    if (text.length > 2000) {
      setError('Text exceeds 2000 character limit.')
      return
    }
    if (includeNameEmail && email && !/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email)) {
      setError('Invalid email address.')
      return
    }
    setLoading(true)
    try {
      let userIp = ip
      if (!userIp && !includeNameEmail) {
        const res = await fetch('/api/ip')
        const data = await res.json()
        userIp = data.ip
      }
      const ts = new Date().toISOString()
      const payload = { text, ip: includeNameEmail ? undefined : userIp, ts, affirmation: true, name: includeNameEmail ? name : undefined, email: includeNameEmail ? email : undefined }
      const signedText = (() => {
        const zw = encodePayload(payload)
        const idx = text.search(/\S/)
        if (idx === -1) return text
        return text.slice(0, idx + 1) + zw + text.slice(idx + 1)
      })()
      setSigned(signedText)
      setSuccess(true)
    } catch (err) {
      setError('Failed to sign text.')
    }
    setLoading(false)
  }

  return (
    <form className="flex flex-col gap-6" onSubmit={handleSubmit}>
      <textarea
        className="liquid-input min-h-[140px] max-h-72 text-lg shadow-inner placeholder-black/40 resize-none p-4"
        placeholder="Paste or write your text here (max 2000 chars)"
        maxLength={2000}
        value={text}
        onChange={e => setText(e.target.value)}
        disabled={success}
        required
        style={{fontFamily: 'inherit'}}
      />
      <label className="flex items-center gap-2 text-black/70 text-sm">
        <input
          type="checkbox"
          checked={affirmed}
          onChange={e => setAffirmed(e.target.checked)}
          className="liquid-checkbox hidden"
        />
        <span
          className={`cursor-pointer select-none px-2 py-1 rounded-md border ${affirmed ? 'bg-blue-100 border-blue-300' : 'bg-gray-100 border-gray-300'}`}
          onClick={() => setAffirmed(!affirmed)}
        >
          I certify that I personally wrote this text and it was not generated by AI.
        </span>
      </label>
      <label className="flex items-center gap-2 text-black/70 text-sm">
        <input
          type="checkbox"
          checked={includeNameEmail}
          onChange={e => setIncludeNameEmail(e.target.checked)}
          className="liquid-checkbox hidden"
        />
        <span
          className={`cursor-pointer select-none px-2 py-1 rounded-md border ${includeNameEmail ? 'bg-blue-100 border-blue-300' : 'bg-gray-100 border-gray-300'}`}
          onClick={() => setIncludeNameEmail(!includeNameEmail)}
        >
          Use name and email instead of IP address
        </span>
      </label>
      {includeNameEmail && (
        <div className="flex gap-4 items-center mt-2">
          <input
            type="text"
            placeholder="Name"
            value={name}
            onChange={e => setName(e.target.value)}
            className="liquid-input text-sm p-2 w-40"
          />
          <input
            type="email"
            placeholder="Email"
            value={email}
            onChange={e => setEmail(e.target.value)}
            className="liquid-input text-sm p-2 w-60"
          />
        </div>
      )}
      <button
        type="submit"
        className="liquid-btn py-3 px-6"
        disabled={loading || success}
      >
        {loading ? 'Signing...' : 'Sign Text'}
      </button>
      {error && <div className="text-red-500 text-sm text-center">{error}</div>}
      {success && (
        <OutputDisplay value={signed} />
      )}
    </form>
  )
}
