"use client"

import { useState } from 'react'
import OutputDisplay from './OutputDisplay'
import { signText } from '../lib/sign'

export default function TextSigner({ ip }) {
  const [text, setText] = useState('')
  const [affirmed, setAffirmed] = useState(false)
  const [signed, setSigned] = useState('')
  const [success, setSuccess] = useState(false)
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState('')

  const handleSubmit = async (e) => {
    e.preventDefault()
    setError('')
    if (!affirmed) {
      setError('You must certify authorship.')
      return
    }
    if (!text.trim()) {
      setError('Text cannot be empty.')
      return
    }
    if (text.length > 2000) {
      setError('Text exceeds 2000 character limit.')
      return
    }
    setLoading(true)
    try {
      // Fallback to client IP 
      let userIp = ip
      if (!userIp) {
        const res = await fetch('/api/ip')
        const data = await res.json()
        userIp = data.ip
      }
      const ts = new Date().toISOString()
      const payload = { text, ip: userIp, ts, affirmation: true }
      const signedText = await signText(payload)
      setSigned(signedText)
      setSuccess(true)
    } catch (err) {
      setError('Failed to sign text.')
    }
    setLoading(false)
  }

  return (
    <form className="flex flex-col gap-6" onSubmit={handleSubmit}>
      <textarea
        className="bg-transparent outline-none placeholder-white text-white resize-none border border-white/20 rounded-xl p-4 min-h-[140px] max-h-72 text-lg shadow-inner focus:ring-2 focus:ring-white/30 transition"
        placeholder="Paste or write your text here (max 2000 chars)"
        maxLength={2000}
        value={text}
        onChange={e => setText(e.target.value)}
        disabled={success}
        required
      />
      <label className="flex items-center gap-3 text-white/90">
        <input
          type="checkbox"
          checked={affirmed}
          onChange={e => setAffirmed(e.target.checked)}
          className="accent-white w-5 h-5 rounded focus:ring-2 focus:ring-white/40 transition"
          disabled={success}
        />
        I certify that I personally wrote this text and it was not generated by AI.
      </label>
      <button
        type="submit"
        className="bg-white/20 text-white font-semibold py-3 rounded-xl shadow-lg hover:bg-white/30 active:scale-[.98] transition-all border border-white/30 focus:outline-none focus:ring-2 focus:ring-white/40 disabled:opacity-60"
        disabled={loading || success}
      >
        {loading ? 'Signing...' : 'Sign Text'}
      </button>
      {error && <div className="text-red-400 text-sm text-center">{error}</div>}
      {success && (
        <OutputDisplay value={signed} />
      )}
    </form>
  )
}
